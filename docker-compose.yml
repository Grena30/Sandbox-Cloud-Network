services:

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'
      - '8081:15692'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-pass}
    networks:
      - cloud-compute-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  web-api:
    build: ./backend/web-api
    ports:
      - "5000:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-database:
        condition: service_healthy
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://admin:pass@rabbitmq:5672}
    networks:
      - cloud-compute-network

  compute-intensive:
    build: ./backend/compute-intensive
    depends_on:
      user-database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://user:pass@user-database:5432/user_db}
      - POSTGRES_DB=${POSTGRES_DB:-user_db}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://admin:pass@rabbitmq:5672}
    deploy:
      replicas: 2
    networks:
      - cloud-compute-network

  nginx:
    build: ./load-balancer/
    ports:
      - "80:80"
    networks:
      - cloud-compute-network
    depends_on:
      - request-handler

  request-handler:
    build: ./backend/request-handler
    depends_on:
      user-database:
        condition: service_healthy
    environment:
      - POSTGRES_URL=${POSTGRES_URL:-postgresql://user:pass@user-database:5432/user_db}
      - POSTGRES_DB=${POSTGRES_DB:-user_db}
    deploy:
      replicas: 2
    networks:
      - cloud-compute-network

  user-database:
    build: ./database
    container_name: database
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-user_db}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pass}
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - cloud-compute-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-user_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/lib/docker/overlay2:/var/lib/docker/overlay2:ro
      # - /:/rootfs:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - 9100:9100
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD:-admin}

  consul:
    build: ./service-discovery
    ports:
      - "8500:8500"
    networks:
      - cloud-compute-network

networks:
  cloud-compute-network:
    driver: bridge

volumes:
  user_db_data:
  rabbitmq_data:
  prometheus_data: {}
  grafana_data: {}